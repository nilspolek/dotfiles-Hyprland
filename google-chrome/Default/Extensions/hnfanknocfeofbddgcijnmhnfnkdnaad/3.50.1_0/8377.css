.b9dlpow{background-color:var(--background-alternate);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}
.iu69ejy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;height:390px;color:rgb(var(--orange20));}.iu69ejy > div{zoom:4;}
.b1hvuwxf{height:185px;position:relative;background-color:var(--background);border-top-left-radius:16px;border-top-right-radius:16px;box-shadow:0px 0px 8px rgba(0,0,0,0.04),0px 16px 24px rgba(0,0,0,0.06);}
.bcmu8fm{margin:70px 24px 0 24px;}
.e1y5zb73{position:relative;margin-left:24px;top:34px;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9BdXRob3JpemF0aW9uRXJyb3IudHN4Il0sIm5hbWVzIjpbIi5iOWRscG93IiwiLml1NjllankiLCIuYjFodnV3eGYiLCIuYmNtdThmbSIsIi5lMXk1emI3MyJdLCJtYXBwaW5ncyI6IkFBbURzQkE7QUFNQUM7QUFjRUM7QUFTREM7QUFJTEMiLCJmaWxlIjoiL3dvcmtzcGFjZXMvbGlicy93YWxsZXQtY2RzLWV4dGVuc2lvbi9jb21wb25lbnRzL0F1dGhvcml6YXRpb25FcnJvci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVNZXNzYWdlcywgdXNlSW50bCB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGxpbmFyaWEvY29yZSc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tICdAbGluYXJpYS9yZWFjdCc7XG5pbXBvcnQgeyBCdXR0b24sIEJ1dHRvbkdyb3VwIH0gZnJvbSAnQGNiaHEvY2RzLXdlYi9idXR0b25zJztcbmltcG9ydCB7IEljb24gfSBmcm9tICdAY2JocS9jZHMtd2ViL2ljb25zL0ljb24nO1xuaW1wb3J0IHsgVGV4dFRpdGxlMSB9IGZyb20gJ0BjYmhxL2Nkcy13ZWIvdHlwb2dyYXBoeSc7XG5cbmNvbnN0IG1lc3NhZ2VzID0gZGVmaW5lTWVzc2FnZXMoe1xuICBjb25uZWN0aW9uRmFpbGVkTWVzc2FnZToge1xuICAgIGRlZmF1bHRNZXNzYWdlOiAnQ29ubmVjdGlvbiBmYWlsZWQnLFxuICAgIGRlc2NyaXB0aW9uOiAnQ29ubmVjdGlvbiBmYWlsZWQgZXJyb3Igc3RhdHVzIHRleHQnLFxuICB9LFxuICB0cnlBZ2FpbkJ1dHRvbkdyb3VwOiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICdBY3Rpb24gYnV0dG9ucycsXG4gICAgZGVzY3JpcHRpb246ICdCdXR0b24gZ3JvdXAgYWNjZXNzaWJpbGl0eSBsYWJlbCcsXG4gIH0sXG4gIHRyeUFnYWluQnV0dG9uOiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICdUcnkgYWdhaW4nLFxuICAgIGRlc2NyaXB0aW9uOiAnQWN0aW9uIGJ1dHRvbiB0ZXh0JyxcbiAgfSxcbn0pO1xuXG50eXBlIEF1dGhvcml6YXRpb25FcnJvclByb3BzID0ge1xuICByZXNldEVycm9yOiAoKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIEF1dGhvcml6YXRpb25FcnJvcih7IHJlc2V0RXJyb3IgfTogQXV0aG9yaXphdGlvbkVycm9yUHJvcHMpIHtcbiAgY29uc3QgeyBmb3JtYXRNZXNzYWdlIH0gPSB1c2VJbnRsKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17YmFzZUNvbnRhaW5lcn0+XG4gICAgICA8SWNvbkNvbnRhaW5lcj5cbiAgICAgICAgPEljb24gbmFtZT1cImVycm9yXCIgc2l6ZT1cImxcIiBjb2xvcj1cImN1cnJlbnRDb2xvclwiIC8+XG4gICAgICA8L0ljb25Db250YWluZXI+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtidXR0b25Db250YWluZXJ9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZXJyb3JUZXh0fT5cbiAgICAgICAgICA8VGV4dFRpdGxlMSBhcz1cImgzXCI+e2Zvcm1hdE1lc3NhZ2UobWVzc2FnZXMuY29ubmVjdGlvbkZhaWxlZE1lc3NhZ2UpfTwvVGV4dFRpdGxlMT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtidXR0b25Qb3NpdGlvbn0+XG4gICAgICAgICAgPEJ1dHRvbkdyb3VwIGJsb2NrIGFjY2Vzc2liaWxpdHlMYWJlbD17Zm9ybWF0TWVzc2FnZShtZXNzYWdlcy50cnlBZ2FpbkJ1dHRvbkdyb3VwKX0+XG4gICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJidXR0b25cIiB2YXJpYW50PVwicHJpbWFyeVwiIG9uUHJlc3M9e3Jlc2V0RXJyb3J9IGRhdGEtdGVzdGlkPVwidHJ5LWFnYWluXCI+XG4gICAgICAgICAgICAgIHtmb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLnRyeUFnYWluQnV0dG9uKX1cbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvQnV0dG9uR3JvdXA+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmNvbnN0IGJhc2VDb250YWluZXIgPSBjc3NgXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtYWx0ZXJuYXRlKTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbmA7XG5cbmNvbnN0IEljb25Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZmxleC1ncm93OiAxO1xuICBoZWlnaHQ6IDM5MHB4O1xuICBjb2xvcjogcmdiKHZhcigtLW9yYW5nZTIwKSk7XG5cbiAgLyogSGFjayBmb3IgaW5jcmVhc2luZyB0aGUgc2l6ZSBvZiBhIENEUyBJY29uICovXG4gICYgPiBkaXYge1xuICAgIHpvb206IDQ7XG4gIH1cbmA7XG5cbmNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGNzc2BcbiAgaGVpZ2h0OiAxODVweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kKTtcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMTZweDtcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDE2cHg7XG4gIGJveC1zaGFkb3c6IDBweCAwcHggOHB4IHJnYmEoMCwgMCwgMCwgMC4wNCksIDBweCAxNnB4IDI0cHggcmdiYSgwLCAwLCAwLCAwLjA2KTtcbmA7XG5cbmNvbnN0IGJ1dHRvblBvc2l0aW9uID0gY3NzYFxuICBtYXJnaW46IDcwcHggMjRweCAwIDI0cHg7XG5gO1xuXG5jb25zdCBlcnJvclRleHQgPSBjc3NgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWxlZnQ6IDI0cHg7XG4gIHRvcDogMzRweDtcbmA7XG4iXX0=*/
.t1c8gnb0{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column nowrap;-ms-flex-flow:column nowrap;flex-flow:column nowrap;margin:24px;margin-bottom:0px;}
.a151vtgi{padding:18px 0px 16px 0px;cursor:pointer;}
.pjyyutw{margin:0px 24px 8px 24px;padding:8px 16px;background:#f5f8ff;border-radius:8px;}
.dy5az3{z-index:1;position:relative;width:80px;height:80px;}.dy5az3 > img{width:100%;}
/*# sourceMappingURL=data:application/json;base64,*/

/*# sourceMappingURL=8377.css.map*/