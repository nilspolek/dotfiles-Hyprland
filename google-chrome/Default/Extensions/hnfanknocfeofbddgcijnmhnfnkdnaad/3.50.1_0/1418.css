.b1j77g3o{word-break:break-word;}
/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["/workspaces/apps/extension/src/screens/Receive/ReceiveWalletAddressListItem.tsx"],"names":[".b1j77g3o"],"mappings":"AAuCkBA","file":"/workspaces/apps/extension/src/screens/Receive/ReceiveWalletAddressListItem.tsx","sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { css } from '@linaria/core';\nimport {\n  triggerReceiveByGenericCopyAddressClicked,\n  triggerReceiveByGenericQrCodeClicked,\n} from 'cb-wallet-analytics/receive';\nimport { SUPPORTED_ACCOUNT_BASED_ADDRESS_TYPE_NETWORK_ICONS } from 'cb-wallet-data/chains/AccountBased/constants';\nimport { SolanaAddressType } from 'cb-wallet-data/chains/AccountBased/Solana/config';\nimport { AllPossibleBlockchainSymbol } from 'cb-wallet-data/chains/blockchains';\nimport {\n  BitcoinSegwitAddressType,\n  BitcoinWalletConfiguration,\n} from 'cb-wallet-data/chains/UTXO/Bitcoin/config';\nimport {\n  DogecoinAddressType,\n  DogecoinWalletConfiguration,\n} from 'cb-wallet-data/chains/UTXO/Dogecoin/config';\nimport {\n  LitecoinSegwitAddressType,\n  LitecoinWalletConfiguration,\n} from 'cb-wallet-data/chains/UTXO/Litecoin/config';\nimport { usePrimaryReceiveWallets } from 'cb-wallet-data/hooks/Receive/usePrimaryReceiveWallets';\nimport { Network } from 'cb-wallet-data/stores/Networks/models/Network';\nimport { useIsNetworkAllowed } from 'cb-wallet-data/stores/Wallets/hooks/useIsNetworkAllowed';\nimport { WalletAddress } from 'cb-wallet-data/stores/Wallets/models/WalletAddress';\nimport { sortNetworksWithPrioritization } from 'cb-wallet-data/utils/sortNetworksWithPrioritization';\nimport { CopyIconButton } from 'wallet-cds-extension/components/CopyIconButton/CopyIconButton';\nimport { NetworkIcon } from 'wallet-cds-extension/components/NetworkIcon/NetworkIcon';\nimport { Tooltip } from 'wallet-cds-extension/components/Tooltip';\nimport { MessageDescriptor } from '@cb/types';\nimport { IconButton } from '@cbhq/cds-web/buttons';\nimport { Icon } from '@cbhq/cds-web/icons';\nimport { Box, HStack, Spacer, VStack } from '@cbhq/cds-web/layout';\nimport { Pressable } from '@cbhq/cds-web/system';\nimport { TextHeadline, TextLabel2 } from '@cbhq/cds-web/typography';\n\nimport { useActiveNetworks } from './useActiveNetworks';\n\nconst breakWord = css`\n  word-break: break-word;\n`;\n\nconst messages = defineMessages({\n  ethAddressHeadline: {\n    defaultMessage: 'Your Ethereum address',\n    description: 'Headline for the wallet address',\n  },\n  solAddressHeadline: {\n    defaultMessage: 'Your Solana address',\n    description: 'Headline for the wallet address',\n  },\n  btcAddressHeadline: {\n    defaultMessage: 'Your Bitcoin address',\n    description: 'Headline for the wallet address',\n  },\n  dogeAddressHeadline: {\n    defaultMessage: 'Your Dogecoin address',\n    description: 'Headline for the wallet address',\n  },\n  ltcAddressHeadline: {\n    defaultMessage: 'Your Litecoin address',\n    description: 'Headline for the wallet address',\n  },\n  ethAddressLabelTooltip: {\n    defaultMessage:\n      'Use for receiving tokens and NFTs on Ethereum, Base, Polygon, Avalanche, Arbitrum, and other compatible networks',\n\n    description: 'Wallet address tooltip text',\n  },\n  solAddressLabelTooltip: {\n    defaultMessage: 'Use for receiving tokens and NFTs on Solana only',\n    description: 'Wallet address tooltip text',\n  },\n  btcAddressLabelTooltip: {\n    defaultMessage:\n      \"Wallet supports SegWit and Legacy address formats. Try using SegWit first, and if that doesn't work, use Legacy.\",\n    description: 'Wallet address tooltip text',\n  },\n  dogeAddressLabelTooltip: {\n    defaultMessage: 'Use for receiving Dogecoin only',\n    description: 'Wallet address tooltip text',\n  },\n  ltcAddressLabelTooltip: {\n    defaultMessage:\n      \"Wallet supports SegWit and Legacy address formats. Try using SegWit first, and if that doesn't work, use Legacy.\",\n    description: 'Wallet address tooltip text',\n  },\n  scanningAddresses: {\n    defaultMessage: 'Scanning addresses...',\n    description: 'Scanning addresses text',\n  },\n});\n\ntype BoxPropsSubset = Partial<\n  Omit<\n    React.ComponentProps<typeof Box>,\n    | 'bordered'\n    | 'borderRadius'\n    | 'flexDirection'\n    | 'spacingTop'\n    | 'spacingBottom'\n    | 'spacingStart'\n    | 'spacingEnd'\n  >\n>;\n\ntype ReceiveWalletAddressListItemProps = BoxPropsSubset & {\n  blockchainName: AllPossibleBlockchainSymbol;\n  walletAddress: WalletAddress;\n  onPressCopy: (blockchainName: AllPossibleBlockchainSymbol, walletAddress: WalletAddress) => void;\n  onPressQRCode: (\n    blockchainName: AllPossibleBlockchainSymbol,\n    walletAddress: WalletAddress,\n  ) => void;\n};\n\nexport function ReceiveWalletAddressListItem(props: ReceiveWalletAddressListItemProps) {\n  const { onPressCopy, onPressQRCode, blockchainName, walletAddress, ...otherBoxProps } = props;\n  const {\n    address,\n    type: { rawValue: addressType },\n  } = walletAddress;\n  const wallets = usePrimaryReceiveWallets();\n\n  const wallet = useMemo(() => {\n    return wallets.get(blockchainName);\n  }, [blockchainName, wallets]);\n  const { formatMessage } = useIntl();\n  const { activeEthMainnets, activeSolMainnets } = useActiveNetworks();\n  const isNetworkAllowed = useIsNetworkAllowed();\n\n  const { headlineMessage, addressTooltipMessage } = useMemo<\n    Record<string, Omit<MessageDescriptor, 'id'>>\n  >(() => {\n    switch (addressType) {\n      case SolanaAddressType.rawValue:\n        return {\n          headlineMessage: messages.solAddressHeadline,\n          addressTooltipMessage: messages.solAddressLabelTooltip,\n        };\n\n      case BitcoinSegwitAddressType.rawValue:\n        return {\n          headlineMessage: messages.btcAddressHeadline,\n          addressTooltipMessage: messages.btcAddressLabelTooltip,\n        };\n\n      case DogecoinAddressType.rawValue:\n        return {\n          headlineMessage: messages.dogeAddressHeadline,\n          addressTooltipMessage: messages.dogeAddressLabelTooltip,\n        };\n      case LitecoinSegwitAddressType.rawValue:\n        return {\n          headlineMessage: messages.ltcAddressHeadline,\n          addressTooltipMessage: messages.ltcAddressLabelTooltip,\n        };\n      default:\n        return {\n          headlineMessage: messages.ethAddressHeadline,\n          addressTooltipMessage: messages.ethAddressLabelTooltip,\n        };\n    }\n  }, [addressType]);\n\n  const supportedChainIcons = useMemo<JSX.Element[]>(() => {\n    let networks: { name: string; network: Network }[] = [];\n\n    switch (addressType) {\n      case SolanaAddressType.rawValue:\n        networks = activeSolMainnets;\n        break;\n      case BitcoinSegwitAddressType.rawValue:\n        return [\n          <NetworkIcon\n            size=\"small\"\n            key={addressType}\n            network={BitcoinWalletConfiguration.networkSetting.defaultMainnet.network}\n            assetIconUrl={BitcoinWalletConfiguration.imageURL}\n          />,\n        ];\n      case DogecoinAddressType.rawValue:\n        return [\n          <NetworkIcon\n            size=\"small\"\n            key={addressType}\n            network={DogecoinWalletConfiguration.networkSetting.defaultMainnet.network}\n            assetIconUrl={DogecoinWalletConfiguration.imageURL}\n          />,\n        ];\n      case LitecoinSegwitAddressType.rawValue:\n        return [\n          <NetworkIcon\n            size=\"small\"\n            key={addressType}\n            network={LitecoinWalletConfiguration.networkSetting.defaultMainnet.network}\n            assetIconUrl={LitecoinWalletConfiguration.imageURL}\n          />,\n        ];\n      default:\n        networks = activeEthMainnets;\n    }\n\n    networks = networks\n      .filter((network) => {\n        const shouldShowIcon = SUPPORTED_ACCOUNT_BASED_ADDRESS_TYPE_NETWORK_ICONS.get(\n          addressType,\n        )?.includes(network.name);\n        const isAllowed = isNetworkAllowed(network.network);\n        return shouldShowIcon && isAllowed;\n      })\n      .sort(sortNetworksWithPrioritization);\n\n    return networks.map((network) => (\n      <NetworkIcon network={network.network} size=\"small\" key={network.name} />\n    ));\n  }, [addressType, activeSolMainnets, activeEthMainnets, isNetworkAllowed]);\n\n  const handlePressCopy = useCallback<\n    NonNullable<React.ComponentProps<typeof IconButton>['onPress']>\n  >(() => {\n    triggerReceiveByGenericCopyAddressClicked(blockchainName);\n    onPressCopy(blockchainName, walletAddress);\n  }, [onPressCopy, blockchainName, walletAddress]);\n\n  const handlePressQRCode = useCallback<\n    NonNullable<React.ComponentProps<typeof IconButton>['onPress']>\n  >(() => {\n    triggerReceiveByGenericQrCodeClicked(blockchainName);\n    onPressQRCode(blockchainName, walletAddress);\n  }, [onPressQRCode, blockchainName, walletAddress]);\n\n  return (\n    <Pressable onPress={handlePressCopy} backgroundColor=\"transparent\">\n      <Box\n        {...otherBoxProps}\n        bordered\n        borderRadius=\"standard\"\n        flexDirection=\"column\"\n        background=\"transparent\"\n        spacingTop={2}\n        spacingBottom={2}\n        spacingStart={2}\n        spacingEnd={2}\n      >\n        <HStack gap={1} alignItems=\"center\" spacingBottom={0.5}>\n          <TextHeadline as=\"p\" testID=\"wallet-address-headline\">\n            {formatMessage(headlineMessage)}\n          </TextHeadline>\n          <Tooltip content={formatMessage(addressTooltipMessage)} placement=\"bottom\">\n            <Icon name=\"info\" size=\"xs\" color=\"foreground\" />\n          </Tooltip>\n        </HStack>\n\n        <HStack justifyContent=\"space-between\" gap={2}>\n          <VStack>\n            <TextLabel2 as=\"p\" color=\"foregroundMuted\" testID=\"wallet-address-string\">\n              <span className={breakWord}>\n                {wallet ? address : formatMessage(messages.scanningAddresses)}\n              </span>\n            </TextLabel2>\n\n            {Boolean(supportedChainIcons.length) && (\n              <VStack>\n                <Spacer vertical={0.5} />\n                <HStack gap={1} testID=\"wallet-address-chain-icons\">\n                  {supportedChainIcons}\n                </HStack>\n              </VStack>\n            )}\n          </VStack>\n          <HStack gap={1}>\n            <IconButton\n              // @ts-expect-error TS(2322): Type 'string' is not assignable to type 'Component... Remove this comment to see the full error message\n              as=\"div\"\n              name=\"qrCode\"\n              onPress={handlePressQRCode}\n              testID=\"wallet-address-qr-code-button\"\n            />\n            <CopyIconButton\n              // @ts-expect-error TS(2322): Type 'string' is not assignable to type 'Component... Remove this comment to see the full error message\n              as=\"div\"\n              textToCopy={address}\n              testID=\"wallet-address-copy-button\"\n            />\n          </HStack>\n        </HStack>\n      </Box>\n    </Pressable>\n  );\n}\n"]}*/

/*# sourceMappingURL=1418.css.map*/